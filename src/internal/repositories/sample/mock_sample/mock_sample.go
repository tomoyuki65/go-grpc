// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repositories/sample/sample.go
//
// Generated by this command:
//
//	mockgen -source=./internal/repositories/sample/sample.go -destination=./internal/repositories/sample/mock_sample/mock_sample.go
//

// Package mock_sample is a generated GoMock package.
package mock_sample

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSampleRepository is a mock of SampleRepository interface.
type MockSampleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSampleRepositoryMockRecorder
	isgomock struct{}
}

// MockSampleRepositoryMockRecorder is the mock recorder for MockSampleRepository.
type MockSampleRepositoryMockRecorder struct {
	mock *MockSampleRepository
}

// NewMockSampleRepository creates a new mock instance.
func NewMockSampleRepository(ctrl *gomock.Controller) *MockSampleRepository {
	mock := &MockSampleRepository{ctrl: ctrl}
	mock.recorder = &MockSampleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSampleRepository) EXPECT() *MockSampleRepositoryMockRecorder {
	return m.recorder
}

// Hello mocks base method.
func (m *MockSampleRepository) Hello() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hello")
	ret0, _ := ret[0].(string)
	return ret0
}

// Hello indicates an expected call of Hello.
func (mr *MockSampleRepositoryMockRecorder) Hello() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hello", reflect.TypeOf((*MockSampleRepository)(nil).Hello))
}
