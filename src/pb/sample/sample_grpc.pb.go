// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.24.4
// source: proto/sample/sample.proto

package sample

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SampleService_Hello_FullMethodName                    = "/sample.SampleService/Hello"
	SampleService_HelloAddText_FullMethodName             = "/sample.SampleService/HelloAddText"
	SampleService_HelloServerStream_FullMethodName        = "/sample.SampleService/HelloServerStream"
	SampleService_HelloClientStream_FullMethodName        = "/sample.SampleService/HelloClientStream"
	SampleService_HelloBidirectionalStream_FullMethodName = "/sample.SampleService/HelloBidirectionalStream"
	SampleService_HelloApi_FullMethodName                 = "/sample.SampleService/HelloApi"
	SampleService_HelloAddTextApi_FullMethodName          = "/sample.SampleService/HelloAddTextApi"
)

// SampleServiceClient is the client API for SampleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// サンプルサービス
type SampleServiceClient interface {
	// 「Hello World !!」を出力
	Hello(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HelloResponseBody, error)
	// 「Hello {リクエストパラメータのtext}」を出力
	HelloAddText(ctx context.Context, in *HelloAddTextRequestBody, opts ...grpc.CallOption) (*HelloAddTextResponseBody, error)
	// サーバーストリーミング（1リクエスト-複数のレスポンス）
	HelloServerStream(ctx context.Context, in *HelloServerStreamRequestBody, opts ...grpc.CallOption) (grpc.ServerStreamingClient[HelloServerStreamResponseBody], error)
	// クライアントストリーミング（複数のリクエスト-1レスポンス）
	HelloClientStream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[HelloClientStreamRequestBody, HelloClientStreamResponseBody], error)
	// 双方向ストリーミング（複数のリクエスト-複数のレスポンス）
	HelloBidirectionalStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[HelloBidirectionalStreamRequestBody, HelloBidirectionalStreamResponseBody], error)
	// gRPC-Gateway（GETメソッド）
	HelloApi(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HelloResponseBody, error)
	// gRPC-Gateway（POSTメソッド）
	HelloAddTextApi(ctx context.Context, in *HelloAddTextRequestBody, opts ...grpc.CallOption) (*HelloAddTextResponseBody, error)
}

type sampleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSampleServiceClient(cc grpc.ClientConnInterface) SampleServiceClient {
	return &sampleServiceClient{cc}
}

func (c *sampleServiceClient) Hello(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HelloResponseBody, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HelloResponseBody)
	err := c.cc.Invoke(ctx, SampleService_Hello_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleServiceClient) HelloAddText(ctx context.Context, in *HelloAddTextRequestBody, opts ...grpc.CallOption) (*HelloAddTextResponseBody, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HelloAddTextResponseBody)
	err := c.cc.Invoke(ctx, SampleService_HelloAddText_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleServiceClient) HelloServerStream(ctx context.Context, in *HelloServerStreamRequestBody, opts ...grpc.CallOption) (grpc.ServerStreamingClient[HelloServerStreamResponseBody], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SampleService_ServiceDesc.Streams[0], SampleService_HelloServerStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[HelloServerStreamRequestBody, HelloServerStreamResponseBody]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SampleService_HelloServerStreamClient = grpc.ServerStreamingClient[HelloServerStreamResponseBody]

func (c *sampleServiceClient) HelloClientStream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[HelloClientStreamRequestBody, HelloClientStreamResponseBody], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SampleService_ServiceDesc.Streams[1], SampleService_HelloClientStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[HelloClientStreamRequestBody, HelloClientStreamResponseBody]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SampleService_HelloClientStreamClient = grpc.ClientStreamingClient[HelloClientStreamRequestBody, HelloClientStreamResponseBody]

func (c *sampleServiceClient) HelloBidirectionalStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[HelloBidirectionalStreamRequestBody, HelloBidirectionalStreamResponseBody], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SampleService_ServiceDesc.Streams[2], SampleService_HelloBidirectionalStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[HelloBidirectionalStreamRequestBody, HelloBidirectionalStreamResponseBody]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SampleService_HelloBidirectionalStreamClient = grpc.BidiStreamingClient[HelloBidirectionalStreamRequestBody, HelloBidirectionalStreamResponseBody]

func (c *sampleServiceClient) HelloApi(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HelloResponseBody, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HelloResponseBody)
	err := c.cc.Invoke(ctx, SampleService_HelloApi_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleServiceClient) HelloAddTextApi(ctx context.Context, in *HelloAddTextRequestBody, opts ...grpc.CallOption) (*HelloAddTextResponseBody, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HelloAddTextResponseBody)
	err := c.cc.Invoke(ctx, SampleService_HelloAddTextApi_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SampleServiceServer is the server API for SampleService service.
// All implementations must embed UnimplementedSampleServiceServer
// for forward compatibility.
//
// サンプルサービス
type SampleServiceServer interface {
	// 「Hello World !!」を出力
	Hello(context.Context, *Empty) (*HelloResponseBody, error)
	// 「Hello {リクエストパラメータのtext}」を出力
	HelloAddText(context.Context, *HelloAddTextRequestBody) (*HelloAddTextResponseBody, error)
	// サーバーストリーミング（1リクエスト-複数のレスポンス）
	HelloServerStream(*HelloServerStreamRequestBody, grpc.ServerStreamingServer[HelloServerStreamResponseBody]) error
	// クライアントストリーミング（複数のリクエスト-1レスポンス）
	HelloClientStream(grpc.ClientStreamingServer[HelloClientStreamRequestBody, HelloClientStreamResponseBody]) error
	// 双方向ストリーミング（複数のリクエスト-複数のレスポンス）
	HelloBidirectionalStream(grpc.BidiStreamingServer[HelloBidirectionalStreamRequestBody, HelloBidirectionalStreamResponseBody]) error
	// gRPC-Gateway（GETメソッド）
	HelloApi(context.Context, *Empty) (*HelloResponseBody, error)
	// gRPC-Gateway（POSTメソッド）
	HelloAddTextApi(context.Context, *HelloAddTextRequestBody) (*HelloAddTextResponseBody, error)
	mustEmbedUnimplementedSampleServiceServer()
}

// UnimplementedSampleServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSampleServiceServer struct{}

func (UnimplementedSampleServiceServer) Hello(context.Context, *Empty) (*HelloResponseBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (UnimplementedSampleServiceServer) HelloAddText(context.Context, *HelloAddTextRequestBody) (*HelloAddTextResponseBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelloAddText not implemented")
}
func (UnimplementedSampleServiceServer) HelloServerStream(*HelloServerStreamRequestBody, grpc.ServerStreamingServer[HelloServerStreamResponseBody]) error {
	return status.Errorf(codes.Unimplemented, "method HelloServerStream not implemented")
}
func (UnimplementedSampleServiceServer) HelloClientStream(grpc.ClientStreamingServer[HelloClientStreamRequestBody, HelloClientStreamResponseBody]) error {
	return status.Errorf(codes.Unimplemented, "method HelloClientStream not implemented")
}
func (UnimplementedSampleServiceServer) HelloBidirectionalStream(grpc.BidiStreamingServer[HelloBidirectionalStreamRequestBody, HelloBidirectionalStreamResponseBody]) error {
	return status.Errorf(codes.Unimplemented, "method HelloBidirectionalStream not implemented")
}
func (UnimplementedSampleServiceServer) HelloApi(context.Context, *Empty) (*HelloResponseBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelloApi not implemented")
}
func (UnimplementedSampleServiceServer) HelloAddTextApi(context.Context, *HelloAddTextRequestBody) (*HelloAddTextResponseBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelloAddTextApi not implemented")
}
func (UnimplementedSampleServiceServer) mustEmbedUnimplementedSampleServiceServer() {}
func (UnimplementedSampleServiceServer) testEmbeddedByValue()                       {}

// UnsafeSampleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SampleServiceServer will
// result in compilation errors.
type UnsafeSampleServiceServer interface {
	mustEmbedUnimplementedSampleServiceServer()
}

func RegisterSampleServiceServer(s grpc.ServiceRegistrar, srv SampleServiceServer) {
	// If the following call pancis, it indicates UnimplementedSampleServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SampleService_ServiceDesc, srv)
}

func _SampleService_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleServiceServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SampleService_Hello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleServiceServer).Hello(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SampleService_HelloAddText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloAddTextRequestBody)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleServiceServer).HelloAddText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SampleService_HelloAddText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleServiceServer).HelloAddText(ctx, req.(*HelloAddTextRequestBody))
	}
	return interceptor(ctx, in, info, handler)
}

func _SampleService_HelloServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HelloServerStreamRequestBody)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SampleServiceServer).HelloServerStream(m, &grpc.GenericServerStream[HelloServerStreamRequestBody, HelloServerStreamResponseBody]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SampleService_HelloServerStreamServer = grpc.ServerStreamingServer[HelloServerStreamResponseBody]

func _SampleService_HelloClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SampleServiceServer).HelloClientStream(&grpc.GenericServerStream[HelloClientStreamRequestBody, HelloClientStreamResponseBody]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SampleService_HelloClientStreamServer = grpc.ClientStreamingServer[HelloClientStreamRequestBody, HelloClientStreamResponseBody]

func _SampleService_HelloBidirectionalStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SampleServiceServer).HelloBidirectionalStream(&grpc.GenericServerStream[HelloBidirectionalStreamRequestBody, HelloBidirectionalStreamResponseBody]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SampleService_HelloBidirectionalStreamServer = grpc.BidiStreamingServer[HelloBidirectionalStreamRequestBody, HelloBidirectionalStreamResponseBody]

func _SampleService_HelloApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleServiceServer).HelloApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SampleService_HelloApi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleServiceServer).HelloApi(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SampleService_HelloAddTextApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloAddTextRequestBody)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleServiceServer).HelloAddTextApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SampleService_HelloAddTextApi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleServiceServer).HelloAddTextApi(ctx, req.(*HelloAddTextRequestBody))
	}
	return interceptor(ctx, in, info, handler)
}

// SampleService_ServiceDesc is the grpc.ServiceDesc for SampleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SampleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sample.SampleService",
	HandlerType: (*SampleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _SampleService_Hello_Handler,
		},
		{
			MethodName: "HelloAddText",
			Handler:    _SampleService_HelloAddText_Handler,
		},
		{
			MethodName: "HelloApi",
			Handler:    _SampleService_HelloApi_Handler,
		},
		{
			MethodName: "HelloAddTextApi",
			Handler:    _SampleService_HelloAddTextApi_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HelloServerStream",
			Handler:       _SampleService_HelloServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "HelloClientStream",
			Handler:       _SampleService_HelloClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "HelloBidirectionalStream",
			Handler:       _SampleService_HelloBidirectionalStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/sample/sample.proto",
}
