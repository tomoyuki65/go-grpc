// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/sample/sample.proto

package sample

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Empty with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Empty) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Empty with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EmptyMultiError, or nil if none found.
func (m *Empty) ValidateAll() error {
	return m.validate(true)
}

func (m *Empty) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EmptyMultiError(errors)
	}

	return nil
}

// EmptyMultiError is an error wrapping multiple validation errors returned by
// Empty.ValidateAll() if the designated constraints aren't met.
type EmptyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmptyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmptyMultiError) AllErrors() []error { return m }

// EmptyValidationError is the validation error returned by Empty.Validate if
// the designated constraints aren't met.
type EmptyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmptyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmptyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmptyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmptyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmptyValidationError) ErrorName() string { return "EmptyValidationError" }

// Error satisfies the builtin error interface
func (e EmptyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmpty.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmptyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmptyValidationError{}

// Validate checks the field values on HelloResponseBody with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *HelloResponseBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HelloResponseBody with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HelloResponseBodyMultiError, or nil if none found.
func (m *HelloResponseBody) ValidateAll() error {
	return m.validate(true)
}

func (m *HelloResponseBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return HelloResponseBodyMultiError(errors)
	}

	return nil
}

// HelloResponseBodyMultiError is an error wrapping multiple validation errors
// returned by HelloResponseBody.ValidateAll() if the designated constraints
// aren't met.
type HelloResponseBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HelloResponseBodyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HelloResponseBodyMultiError) AllErrors() []error { return m }

// HelloResponseBodyValidationError is the validation error returned by
// HelloResponseBody.Validate if the designated constraints aren't met.
type HelloResponseBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HelloResponseBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HelloResponseBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HelloResponseBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HelloResponseBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HelloResponseBodyValidationError) ErrorName() string {
	return "HelloResponseBodyValidationError"
}

// Error satisfies the builtin error interface
func (e HelloResponseBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHelloResponseBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HelloResponseBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HelloResponseBodyValidationError{}

// Validate checks the field values on HelloAddTextRequestBody with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HelloAddTextRequestBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HelloAddTextRequestBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HelloAddTextRequestBodyMultiError, or nil if none found.
func (m *HelloAddTextRequestBody) ValidateAll() error {
	return m.validate(true)
}

func (m *HelloAddTextRequestBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetText()) < 1 {
		err := HelloAddTextRequestBodyValidationError{
			field:  "Text",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return HelloAddTextRequestBodyMultiError(errors)
	}

	return nil
}

// HelloAddTextRequestBodyMultiError is an error wrapping multiple validation
// errors returned by HelloAddTextRequestBody.ValidateAll() if the designated
// constraints aren't met.
type HelloAddTextRequestBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HelloAddTextRequestBodyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HelloAddTextRequestBodyMultiError) AllErrors() []error { return m }

// HelloAddTextRequestBodyValidationError is the validation error returned by
// HelloAddTextRequestBody.Validate if the designated constraints aren't met.
type HelloAddTextRequestBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HelloAddTextRequestBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HelloAddTextRequestBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HelloAddTextRequestBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HelloAddTextRequestBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HelloAddTextRequestBodyValidationError) ErrorName() string {
	return "HelloAddTextRequestBodyValidationError"
}

// Error satisfies the builtin error interface
func (e HelloAddTextRequestBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHelloAddTextRequestBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HelloAddTextRequestBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HelloAddTextRequestBodyValidationError{}

// Validate checks the field values on HelloAddTextResponseBody with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HelloAddTextResponseBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HelloAddTextResponseBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HelloAddTextResponseBodyMultiError, or nil if none found.
func (m *HelloAddTextResponseBody) ValidateAll() error {
	return m.validate(true)
}

func (m *HelloAddTextResponseBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return HelloAddTextResponseBodyMultiError(errors)
	}

	return nil
}

// HelloAddTextResponseBodyMultiError is an error wrapping multiple validation
// errors returned by HelloAddTextResponseBody.ValidateAll() if the designated
// constraints aren't met.
type HelloAddTextResponseBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HelloAddTextResponseBodyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HelloAddTextResponseBodyMultiError) AllErrors() []error { return m }

// HelloAddTextResponseBodyValidationError is the validation error returned by
// HelloAddTextResponseBody.Validate if the designated constraints aren't met.
type HelloAddTextResponseBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HelloAddTextResponseBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HelloAddTextResponseBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HelloAddTextResponseBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HelloAddTextResponseBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HelloAddTextResponseBodyValidationError) ErrorName() string {
	return "HelloAddTextResponseBodyValidationError"
}

// Error satisfies the builtin error interface
func (e HelloAddTextResponseBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHelloAddTextResponseBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HelloAddTextResponseBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HelloAddTextResponseBodyValidationError{}

// Validate checks the field values on HelloServerStreamRequestBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HelloServerStreamRequestBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HelloServerStreamRequestBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HelloServerStreamRequestBodyMultiError, or nil if none found.
func (m *HelloServerStreamRequestBody) ValidateAll() error {
	return m.validate(true)
}

func (m *HelloServerStreamRequestBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetText()) < 1 {
		err := HelloServerStreamRequestBodyValidationError{
			field:  "Text",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return HelloServerStreamRequestBodyMultiError(errors)
	}

	return nil
}

// HelloServerStreamRequestBodyMultiError is an error wrapping multiple
// validation errors returned by HelloServerStreamRequestBody.ValidateAll() if
// the designated constraints aren't met.
type HelloServerStreamRequestBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HelloServerStreamRequestBodyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HelloServerStreamRequestBodyMultiError) AllErrors() []error { return m }

// HelloServerStreamRequestBodyValidationError is the validation error returned
// by HelloServerStreamRequestBody.Validate if the designated constraints
// aren't met.
type HelloServerStreamRequestBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HelloServerStreamRequestBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HelloServerStreamRequestBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HelloServerStreamRequestBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HelloServerStreamRequestBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HelloServerStreamRequestBodyValidationError) ErrorName() string {
	return "HelloServerStreamRequestBodyValidationError"
}

// Error satisfies the builtin error interface
func (e HelloServerStreamRequestBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHelloServerStreamRequestBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HelloServerStreamRequestBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HelloServerStreamRequestBodyValidationError{}

// Validate checks the field values on HelloServerStreamResponseBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HelloServerStreamResponseBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HelloServerStreamResponseBody with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// HelloServerStreamResponseBodyMultiError, or nil if none found.
func (m *HelloServerStreamResponseBody) ValidateAll() error {
	return m.validate(true)
}

func (m *HelloServerStreamResponseBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return HelloServerStreamResponseBodyMultiError(errors)
	}

	return nil
}

// HelloServerStreamResponseBodyMultiError is an error wrapping multiple
// validation errors returned by HelloServerStreamResponseBody.ValidateAll()
// if the designated constraints aren't met.
type HelloServerStreamResponseBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HelloServerStreamResponseBodyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HelloServerStreamResponseBodyMultiError) AllErrors() []error { return m }

// HelloServerStreamResponseBodyValidationError is the validation error
// returned by HelloServerStreamResponseBody.Validate if the designated
// constraints aren't met.
type HelloServerStreamResponseBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HelloServerStreamResponseBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HelloServerStreamResponseBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HelloServerStreamResponseBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HelloServerStreamResponseBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HelloServerStreamResponseBodyValidationError) ErrorName() string {
	return "HelloServerStreamResponseBodyValidationError"
}

// Error satisfies the builtin error interface
func (e HelloServerStreamResponseBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHelloServerStreamResponseBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HelloServerStreamResponseBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HelloServerStreamResponseBodyValidationError{}

// Validate checks the field values on HelloClientStreamRequestBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HelloClientStreamRequestBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HelloClientStreamRequestBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HelloClientStreamRequestBodyMultiError, or nil if none found.
func (m *HelloClientStreamRequestBody) ValidateAll() error {
	return m.validate(true)
}

func (m *HelloClientStreamRequestBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetText()) < 1 {
		err := HelloClientStreamRequestBodyValidationError{
			field:  "Text",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return HelloClientStreamRequestBodyMultiError(errors)
	}

	return nil
}

// HelloClientStreamRequestBodyMultiError is an error wrapping multiple
// validation errors returned by HelloClientStreamRequestBody.ValidateAll() if
// the designated constraints aren't met.
type HelloClientStreamRequestBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HelloClientStreamRequestBodyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HelloClientStreamRequestBodyMultiError) AllErrors() []error { return m }

// HelloClientStreamRequestBodyValidationError is the validation error returned
// by HelloClientStreamRequestBody.Validate if the designated constraints
// aren't met.
type HelloClientStreamRequestBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HelloClientStreamRequestBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HelloClientStreamRequestBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HelloClientStreamRequestBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HelloClientStreamRequestBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HelloClientStreamRequestBodyValidationError) ErrorName() string {
	return "HelloClientStreamRequestBodyValidationError"
}

// Error satisfies the builtin error interface
func (e HelloClientStreamRequestBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHelloClientStreamRequestBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HelloClientStreamRequestBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HelloClientStreamRequestBodyValidationError{}

// Validate checks the field values on HelloClientStreamResponseBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HelloClientStreamResponseBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HelloClientStreamResponseBody with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// HelloClientStreamResponseBodyMultiError, or nil if none found.
func (m *HelloClientStreamResponseBody) ValidateAll() error {
	return m.validate(true)
}

func (m *HelloClientStreamResponseBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return HelloClientStreamResponseBodyMultiError(errors)
	}

	return nil
}

// HelloClientStreamResponseBodyMultiError is an error wrapping multiple
// validation errors returned by HelloClientStreamResponseBody.ValidateAll()
// if the designated constraints aren't met.
type HelloClientStreamResponseBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HelloClientStreamResponseBodyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HelloClientStreamResponseBodyMultiError) AllErrors() []error { return m }

// HelloClientStreamResponseBodyValidationError is the validation error
// returned by HelloClientStreamResponseBody.Validate if the designated
// constraints aren't met.
type HelloClientStreamResponseBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HelloClientStreamResponseBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HelloClientStreamResponseBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HelloClientStreamResponseBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HelloClientStreamResponseBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HelloClientStreamResponseBodyValidationError) ErrorName() string {
	return "HelloClientStreamResponseBodyValidationError"
}

// Error satisfies the builtin error interface
func (e HelloClientStreamResponseBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHelloClientStreamResponseBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HelloClientStreamResponseBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HelloClientStreamResponseBodyValidationError{}

// Validate checks the field values on HelloBidirectionalStreamRequestBody with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *HelloBidirectionalStreamRequestBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HelloBidirectionalStreamRequestBody
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// HelloBidirectionalStreamRequestBodyMultiError, or nil if none found.
func (m *HelloBidirectionalStreamRequestBody) ValidateAll() error {
	return m.validate(true)
}

func (m *HelloBidirectionalStreamRequestBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetText()) < 1 {
		err := HelloBidirectionalStreamRequestBodyValidationError{
			field:  "Text",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return HelloBidirectionalStreamRequestBodyMultiError(errors)
	}

	return nil
}

// HelloBidirectionalStreamRequestBodyMultiError is an error wrapping multiple
// validation errors returned by
// HelloBidirectionalStreamRequestBody.ValidateAll() if the designated
// constraints aren't met.
type HelloBidirectionalStreamRequestBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HelloBidirectionalStreamRequestBodyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HelloBidirectionalStreamRequestBodyMultiError) AllErrors() []error { return m }

// HelloBidirectionalStreamRequestBodyValidationError is the validation error
// returned by HelloBidirectionalStreamRequestBody.Validate if the designated
// constraints aren't met.
type HelloBidirectionalStreamRequestBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HelloBidirectionalStreamRequestBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HelloBidirectionalStreamRequestBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HelloBidirectionalStreamRequestBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HelloBidirectionalStreamRequestBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HelloBidirectionalStreamRequestBodyValidationError) ErrorName() string {
	return "HelloBidirectionalStreamRequestBodyValidationError"
}

// Error satisfies the builtin error interface
func (e HelloBidirectionalStreamRequestBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHelloBidirectionalStreamRequestBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HelloBidirectionalStreamRequestBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HelloBidirectionalStreamRequestBodyValidationError{}

// Validate checks the field values on HelloBidirectionalStreamResponseBody
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *HelloBidirectionalStreamResponseBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HelloBidirectionalStreamResponseBody
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// HelloBidirectionalStreamResponseBodyMultiError, or nil if none found.
func (m *HelloBidirectionalStreamResponseBody) ValidateAll() error {
	return m.validate(true)
}

func (m *HelloBidirectionalStreamResponseBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return HelloBidirectionalStreamResponseBodyMultiError(errors)
	}

	return nil
}

// HelloBidirectionalStreamResponseBodyMultiError is an error wrapping multiple
// validation errors returned by
// HelloBidirectionalStreamResponseBody.ValidateAll() if the designated
// constraints aren't met.
type HelloBidirectionalStreamResponseBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HelloBidirectionalStreamResponseBodyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HelloBidirectionalStreamResponseBodyMultiError) AllErrors() []error { return m }

// HelloBidirectionalStreamResponseBodyValidationError is the validation error
// returned by HelloBidirectionalStreamResponseBody.Validate if the designated
// constraints aren't met.
type HelloBidirectionalStreamResponseBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HelloBidirectionalStreamResponseBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HelloBidirectionalStreamResponseBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HelloBidirectionalStreamResponseBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HelloBidirectionalStreamResponseBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HelloBidirectionalStreamResponseBodyValidationError) ErrorName() string {
	return "HelloBidirectionalStreamResponseBodyValidationError"
}

// Error satisfies the builtin error interface
func (e HelloBidirectionalStreamResponseBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHelloBidirectionalStreamResponseBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HelloBidirectionalStreamResponseBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HelloBidirectionalStreamResponseBodyValidationError{}
